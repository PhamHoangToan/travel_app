import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:travel_app/Data/model/bookingDetails_model.dart';
import 'package:travel_app/Data/model/flight_model.dart';
import '../../config.dart';
class BookingService {

  // üéØ API ƒë·∫∑t v√©
  static Future<bool> bookFlight(BookingDetails booking) async {
    try {
      final Uri url = Uri.parse("${Config.apiURL}/book-flight");

      // Ki·ªÉm tra flightId, n·∫øu kh√¥ng h·ª£p l·ªá th√¨ g·ª≠i c·∫£ flightInfo
      bool isValidFlightId = booking.flightModel.idflight != null &&
          booking.flightModel.idflight.trim().length ==
              24; // ObjectId MongoDB c√≥ 24 k√Ω t·ª±

      final Map<String, dynamic> requestBody = {
        "flightId": isValidFlightId
            ? booking.flightModel.idflight.trim()
            : "", // Ch·ªâ g·ª≠i n·∫øu h·ª£p l·ªá
        "passengers": booking.passengers.map((p) => p.toJson()).toList(),
        "totalPrice": booking.totalPrice,
      };

      // N·∫øu flightId kh√¥ng h·ª£p l·ªá, g·ª≠i th√™m flightInfo
      if (!isValidFlightId) {
        print("‚ö†Ô∏è flightId kh√¥ng h·ª£p l·ªá, g·ª≠i th√™m flightInfo...");
        requestBody["flightInfo"] = {
          "airlineName": booking.flightModel.airlineName ?? "Unknown Airline",
          "departure": booking.flightModel.departure ?? "Unknown",
          "destination": booking.flightModel.destination ?? "Unknown",
          "departureTime": booking.flightModel.departureTime.toIso8601String(),
          "arrivalTime": booking.flightModel.arrivalTime.toIso8601String(),
          "seatClass": booking.flightModel.seatClass ?? "Economy",
          "seatCount": booking.flightModel.seatCount ?? 0,
          "ticketPrice": booking.flightModel.ticketPrice ?? 0.0,
          "flightStatus": booking.flightModel.flightStatus ?? "Scheduled",
          "image": booking.flightModel.image ?? "",
          "ticketTypes": booking.flightModel.ticketTypes ?? [],
        };
      }

      print("üìå G·ª≠i d·ªØ li·ªáu ƒë·∫∑t v√©: ${jsonEncode(requestBody)}"); // Debug log

      final response = await http.post(
        url,
        headers: {"Content-Type": "application/json"},
        body: jsonEncode(requestBody),
      );

       if (response.statusCode == 200) {
      final responseData = jsonDecode(response.body);
      print("‚úÖ ƒê·∫∑t v√© th√†nh c√¥ng! Flight ID m·ªõi: ${responseData['flightId']}");

      // üî• C·∫≠p nh·∫≠t flightId m·ªõi t·ª´ API
      booking.flightModel.idflight= responseData['flightId'];

      return true;
    } else {
      print("‚ùå API l·ªói: ${response.statusCode} - ${response.body}");
      return false;
    }
    } catch (e) {
      print("‚ùå L·ªói k·∫øt n·ªëi ho·∫∑c x·ª≠ l√Ω: $e");
      return false;
    }
  }

  // üéØ API thanh to√°n
  static Future<String?> processPayment(BookingDetails bookingDetails) async {
  String apiUrl = "${Config.apiURL}/success";

  if (bookingDetails.flightModel == null ||
      bookingDetails.flightModel?.idflight == null) {
    print("‚ùå L·ªói: flightModel ho·∫∑c flightId b·ªã null!");
    return null;
  }

  print("üìå ƒêang g·ª≠i y√™u c·∫ßu l·∫•y th√¥ng tin chuy·∫øn bay t·ª´ MongoDB...");
  print("üìå flightId g·ª≠i ƒëi: ${bookingDetails.flightModel?.idflight}");

  // üõ† Load l·∫°i th√¥ng tin chuy·∫øn bay t·ª´ database
  final flightResponse = await http.get(
    Uri.parse("${Config.apiURL}/${bookingDetails.flightModel!.idflight}"),
    headers: {"Content-Type": "application/json"},
  );

  if (flightResponse.statusCode == 200) {
    var flightData = jsonDecode(flightResponse.body);
  bookingDetails = BookingDetails( // ‚úÖ G√°n l·∫°i to√†n b·ªô object
    id: bookingDetails.id,
    passengers: bookingDetails.passengers,
    flightModel: FlightModel.fromJson(flightData),
    invoice: bookingDetails.invoice,
    totalPrice: bookingDetails.totalPrice,
  ); // C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi
    print("‚úÖ T·∫£i l·∫°i chuy·∫øn bay th√†nh c√¥ng: ${bookingDetails.flightModel}");
  } else {
    print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y chuy·∫øn bay trong DB!");
    return null;
  }

  print("üìå ƒêang g·ª≠i y√™u c·∫ßu thanh to√°n v·ªõi d·ªØ li·ªáu: ${jsonEncode(bookingDetails.toJson())}");

  try {
    var response = await http.post(
      Uri.parse(apiUrl),
      headers: {"Content-Type": "application/json"},
      body: jsonEncode({
        "flightId": bookingDetails.flightModel!.idflight,
        "email": bookingDetails.passengers[0].email,
        "orderId": bookingDetails.id,
        "totalPrice": bookingDetails.totalPrice,
        "paymentMethod": "V√≠ ƒëi·ªán t·ª≠",
      }),
    );

    print("üì• Response: ${response.statusCode} - ${response.body}");

    if (response.statusCode == 200) {
      var data = jsonDecode(response.body);
      return data['qrCode'];
    } else {
      print("‚ùå L·ªói API: ${response.body}");
      return null;
    }
  } catch (e) {
    print("‚ùå L·ªói k·∫øt n·ªëi: $e");
    return null;
  }
}
}